{"id":"iOov","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\package.json","includedInParent":true,"mtime":1624300837947}],"generated":{"js":"\"use strict\";\n/**\n * Copyright (c) 2018 Endel Dreyer\n * Copyright (c) 2014 Ion Drive Software Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.number = exports.string = exports.boolean = exports.writeFloat64 = exports.writeFloat32 = exports.float64 = exports.float32 = exports.uint64 = exports.int64 = exports.uint32 = exports.int32 = exports.uint16 = exports.int16 = exports.uint8 = exports.int8 = exports.utf8Write = void 0;\n/**\n * msgpack implementation highly based on notepack.io\n * https://github.com/darrachequesne/notepack\n */\nfunction utf8Length(str) {\n    var c = 0, length = 0;\n    for (var i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\nfunction utf8Write(view, offset, str) {\n    var c = 0;\n    for (var i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            view[offset++] = c;\n        }\n        else if (c < 0x800) {\n            view[offset++] = 0xc0 | (c >> 6);\n            view[offset++] = 0x80 | (c & 0x3f);\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            view[offset++] = 0xe0 | (c >> 12);\n            view[offset++] = 0x80 | (c >> 6 & 0x3f);\n            view[offset++] = 0x80 | (c & 0x3f);\n        }\n        else {\n            i++;\n            c = 0x10000 + (((c & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n            view[offset++] = 0xf0 | (c >> 18);\n            view[offset++] = 0x80 | (c >> 12 & 0x3f);\n            view[offset++] = 0x80 | (c >> 6 & 0x3f);\n            view[offset++] = 0x80 | (c & 0x3f);\n        }\n    }\n}\nexports.utf8Write = utf8Write;\nfunction int8(bytes, value) {\n    bytes.push(value & 255);\n}\nexports.int8 = int8;\n;\nfunction uint8(bytes, value) {\n    bytes.push(value & 255);\n}\nexports.uint8 = uint8;\n;\nfunction int16(bytes, value) {\n    bytes.push(value & 255);\n    bytes.push((value >> 8) & 255);\n}\nexports.int16 = int16;\n;\nfunction uint16(bytes, value) {\n    bytes.push(value & 255);\n    bytes.push((value >> 8) & 255);\n}\nexports.uint16 = uint16;\n;\nfunction int32(bytes, value) {\n    bytes.push(value & 255);\n    bytes.push((value >> 8) & 255);\n    bytes.push((value >> 16) & 255);\n    bytes.push((value >> 24) & 255);\n}\nexports.int32 = int32;\n;\nfunction uint32(bytes, value) {\n    var b4 = value >> 24;\n    var b3 = value >> 16;\n    var b2 = value >> 8;\n    var b1 = value;\n    bytes.push(b1 & 255);\n    bytes.push(b2 & 255);\n    bytes.push(b3 & 255);\n    bytes.push(b4 & 255);\n}\nexports.uint32 = uint32;\n;\nfunction int64(bytes, value) {\n    var high = Math.floor(value / Math.pow(2, 32));\n    var low = value >>> 0;\n    uint32(bytes, low);\n    uint32(bytes, high);\n}\nexports.int64 = int64;\n;\nfunction uint64(bytes, value) {\n    var high = (value / Math.pow(2, 32)) >> 0;\n    var low = value >>> 0;\n    uint32(bytes, low);\n    uint32(bytes, high);\n}\nexports.uint64 = uint64;\n;\nfunction float32(bytes, value) {\n    writeFloat32(bytes, value);\n}\nexports.float32 = float32;\nfunction float64(bytes, value) {\n    writeFloat64(bytes, value);\n}\nexports.float64 = float64;\n// force little endian to facilitate decoding on multiple implementations\nvar _isLittleEndian = true; // new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\nvar _int32 = new Int32Array(2);\nvar _float32 = new Float32Array(_int32.buffer);\nvar _float64 = new Float64Array(_int32.buffer);\nfunction writeFloat32(bytes, value) {\n    _float32[0] = value;\n    int32(bytes, _int32[0]);\n}\nexports.writeFloat32 = writeFloat32;\n;\nfunction writeFloat64(bytes, value) {\n    _float64[0] = value;\n    int32(bytes, _int32[_isLittleEndian ? 0 : 1]);\n    int32(bytes, _int32[_isLittleEndian ? 1 : 0]);\n}\nexports.writeFloat64 = writeFloat64;\n;\nfunction boolean(bytes, value) {\n    return uint8(bytes, value ? 1 : 0);\n}\nexports.boolean = boolean;\n;\nfunction string(bytes, value) {\n    // encode `null` strings as empty.\n    if (!value) {\n        value = \"\";\n    }\n    var length = utf8Length(value);\n    var size = 0;\n    // fixstr\n    if (length < 0x20) {\n        bytes.push(length | 0xa0);\n        size = 1;\n    }\n    // str 8\n    else if (length < 0x100) {\n        bytes.push(0xd9);\n        uint8(bytes, length);\n        size = 2;\n    }\n    // str 16\n    else if (length < 0x10000) {\n        bytes.push(0xda);\n        uint16(bytes, length);\n        size = 3;\n    }\n    // str 32\n    else if (length < 0x100000000) {\n        bytes.push(0xdb);\n        uint32(bytes, length);\n        size = 5;\n    }\n    else {\n        throw new Error('String too long');\n    }\n    utf8Write(bytes, bytes.length, value);\n    return size + length;\n}\nexports.string = string;\nfunction number(bytes, value) {\n    if (isNaN(value)) {\n        return number(bytes, 0);\n    }\n    else if (!isFinite(value)) {\n        return number(bytes, (value > 0) ? Number.MAX_SAFE_INTEGER : -Number.MAX_SAFE_INTEGER);\n    }\n    else if (value !== (value | 0)) {\n        bytes.push(0xcb);\n        writeFloat64(bytes, value);\n        return 9;\n        // TODO: encode float 32?\n        // is it possible to differentiate between float32 / float64 here?\n        // // float 32\n        // bytes.push(0xca);\n        // writeFloat32(bytes, value);\n        // return 5;\n    }\n    if (value >= 0) {\n        // positive fixnum\n        if (value < 0x80) {\n            uint8(bytes, value);\n            return 1;\n        }\n        // uint 8\n        if (value < 0x100) {\n            bytes.push(0xcc);\n            uint8(bytes, value);\n            return 2;\n        }\n        // uint 16\n        if (value < 0x10000) {\n            bytes.push(0xcd);\n            uint16(bytes, value);\n            return 3;\n        }\n        // uint 32\n        if (value < 0x100000000) {\n            bytes.push(0xce);\n            uint32(bytes, value);\n            return 5;\n        }\n        // uint 64\n        bytes.push(0xcf);\n        uint64(bytes, value);\n        return 9;\n    }\n    else {\n        // negative fixnum\n        if (value >= -0x20) {\n            bytes.push(0xe0 | (value + 0x20));\n            return 1;\n        }\n        // int 8\n        if (value >= -0x80) {\n            bytes.push(0xd0);\n            int8(bytes, value);\n            return 2;\n        }\n        // int 16\n        if (value >= -0x8000) {\n            bytes.push(0xd1);\n            int16(bytes, value);\n            return 3;\n        }\n        // int 32\n        if (value >= -0x80000000) {\n            bytes.push(0xd2);\n            int32(bytes, value);\n            return 5;\n        }\n        // int 64\n        bytes.push(0xd3);\n        int64(bytes, value);\n        return 9;\n    }\n}\nexports.number = number;\n//# sourceMappingURL=data:application/json;base64,"},"sourceMaps":null,"error":null,"hash":"0a5ccb203fe3bd2c81a7c9e0e10f4206","cacheData":{"env":{}}}