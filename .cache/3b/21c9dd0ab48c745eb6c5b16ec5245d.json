{"id":"fseT","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\package.json","includedInParent":true,"mtime":1624300837947},{"name":"../spec","loc":{"line":4,"column":21},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\changes\\ChangeTree.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\spec.js"},{"name":"../Schema","loc":{"line":5,"column":23},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\changes\\ChangeTree.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Schema.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeTree = exports.Root = void 0;\nvar spec_1 = require(\"../spec\");\nvar Schema_1 = require(\"../Schema\");\n//\n// Root holds all schema references by unique id\n//\nvar Root = /** @class */ (function () {\n    function Root() {\n        //\n        // Relation of refId => Schema structure\n        // For direct access of structures during decoding time.\n        //\n        this.refs = new Map();\n        this.refCounts = {};\n        this.deletedRefs = new Set();\n        this.nextUniqueId = 0;\n    }\n    Root.prototype.getNextUniqueId = function () {\n        return this.nextUniqueId++;\n    };\n    // for decoding\n    Root.prototype.addRef = function (refId, ref, incrementCount) {\n        if (incrementCount === void 0) { incrementCount = true; }\n        this.refs.set(refId, ref);\n        if (incrementCount) {\n            this.refCounts[refId] = (this.refCounts[refId] || 0) + 1;\n        }\n    };\n    // for decoding\n    Root.prototype.removeRef = function (refId) {\n        this.refCounts[refId] = this.refCounts[refId] - 1;\n        this.deletedRefs.add(refId);\n    };\n    Root.prototype.clearRefs = function () {\n        this.refs.clear();\n        this.deletedRefs.clear();\n        this.refCounts = {};\n    };\n    // for decoding\n    Root.prototype.garbageCollectDeletedRefs = function () {\n        var _this = this;\n        this.deletedRefs.forEach(function (refId) {\n            if (_this.refCounts[refId] <= 0) {\n                var ref = _this.refs.get(refId);\n                //\n                // Ensure child schema instances have their references removed as well.\n                //\n                if (ref instanceof Schema_1.Schema) {\n                    for (var fieldName in ref['_definition'].schema) {\n                        if (typeof (ref['_definition'].schema[fieldName]) !== \"string\" &&\n                            ref[fieldName] &&\n                            ref[fieldName]['$changes']) {\n                            _this.removeRef(ref[fieldName]['$changes'].refId);\n                        }\n                    }\n                }\n                else {\n                    var definition = ref['$changes'].parent._definition;\n                    var type = definition.schema[definition.fieldsByIndex[ref['$changes'].parentIndex]];\n                    if (typeof (Object.values(type)[0]) === \"function\") {\n                        Array.from(ref.values())\n                            .forEach(function (child) { return _this.removeRef(child['$changes'].refId); });\n                    }\n                }\n                _this.refs.delete(refId);\n                delete _this.refCounts[refId];\n            }\n        });\n        // clear deleted refs.\n        this.deletedRefs.clear();\n    };\n    return Root;\n}());\nexports.Root = Root;\nvar ChangeTree = /** @class */ (function () {\n    function ChangeTree(ref, parent, root) {\n        this.changed = false;\n        this.changes = new Map();\n        this.allChanges = new Set();\n        // cached indexes for filtering\n        this.caches = {};\n        this.currentCustomOperation = 0;\n        this.ref = ref;\n        this.setParent(parent, root);\n    }\n    ChangeTree.prototype.setParent = function (parent, root, parentIndex) {\n        var _this = this;\n        if (!this.indexes) {\n            this.indexes = (this.ref instanceof Schema_1.Schema)\n                ? this.ref['_definition'].indexes\n                : {};\n        }\n        this.parent = parent;\n        this.parentIndex = parentIndex;\n        // avoid setting parents with empty `root`\n        if (!root) {\n            return;\n        }\n        this.root = root;\n        //\n        // assign same parent on child structures\n        //\n        if (this.ref instanceof Schema_1.Schema) {\n            var definition = this.ref['_definition'];\n            for (var field in definition.schema) {\n                var value = this.ref[field];\n                if (value && value['$changes']) {\n                    var parentIndex_1 = definition.indexes[field];\n                    value['$changes'].setParent(this.ref, root, parentIndex_1);\n                }\n            }\n        }\n        else if (typeof (this.ref) === \"object\") {\n            this.ref.forEach(function (value, key) {\n                if (value instanceof Schema_1.Schema) {\n                    var changeTreee = value['$changes'];\n                    var parentIndex_2 = _this.ref['$changes'].indexes[key];\n                    changeTreee.setParent(_this.ref, _this.root, parentIndex_2);\n                }\n            });\n        }\n    };\n    ChangeTree.prototype.operation = function (op) {\n        this.changes.set(--this.currentCustomOperation, op);\n    };\n    ChangeTree.prototype.change = function (fieldName, operation) {\n        if (operation === void 0) { operation = spec_1.OPERATION.ADD; }\n        var index = (typeof (fieldName) === \"number\")\n            ? fieldName\n            : this.indexes[fieldName];\n        this.assertValidIndex(index, fieldName);\n        var previousChange = this.changes.get(index);\n        if (!previousChange ||\n            previousChange.op === spec_1.OPERATION.DELETE ||\n            previousChange.op === spec_1.OPERATION.TOUCH // (mazmorra.io's BattleAction issue)\n        ) {\n            this.changes.set(index, {\n                op: (!previousChange)\n                    ? operation\n                    : (previousChange.op === spec_1.OPERATION.DELETE)\n                        ? spec_1.OPERATION.DELETE_AND_ADD\n                        : operation,\n                // : OPERATION.REPLACE,\n                index: index\n            });\n        }\n        this.allChanges.add(index);\n        this.changed = true;\n        this.touchParents();\n    };\n    ChangeTree.prototype.touch = function (fieldName) {\n        var index = (typeof (fieldName) === \"number\")\n            ? fieldName\n            : this.indexes[fieldName];\n        this.assertValidIndex(index, fieldName);\n        if (!this.changes.has(index)) {\n            this.changes.set(index, { op: spec_1.OPERATION.TOUCH, index: index });\n        }\n        this.allChanges.add(index);\n        // ensure touch is placed until the $root is found.\n        this.touchParents();\n    };\n    ChangeTree.prototype.touchParents = function () {\n        if (this.parent) {\n            this.parent['$changes'].touch(this.parentIndex);\n        }\n    };\n    ChangeTree.prototype.getType = function (index) {\n        if (this.ref['_definition']) {\n            var definition = this.ref['_definition'];\n            return definition.schema[definition.fieldsByIndex[index]];\n        }\n        else {\n            var definition = this.parent['_definition'];\n            var parentType = definition.schema[definition.fieldsByIndex[this.parentIndex]];\n            //\n            // Get the child type from parent structure.\n            // - [\"string\"] => \"string\"\n            // - { map: \"string\" } => \"string\"\n            // - { set: \"string\" } => \"string\"\n            //\n            return Object.values(parentType)[0];\n        }\n    };\n    ChangeTree.prototype.getChildrenFilter = function () {\n        var childFilters = this.parent['_definition'].childFilters;\n        return childFilters && childFilters[this.parentIndex];\n    };\n    //\n    // used during `.encode()`\n    //\n    ChangeTree.prototype.getValue = function (index) {\n        return this.ref['getByIndex'](index);\n    };\n    ChangeTree.prototype.delete = function (fieldName) {\n        var index = (typeof (fieldName) === \"number\")\n            ? fieldName\n            : this.indexes[fieldName];\n        if (index === undefined) {\n            console.warn(\"@colyseus/schema \" + this.ref.constructor.name + \": trying to delete non-existing index: \" + fieldName + \" (\" + index + \")\");\n            return;\n        }\n        var previousValue = this.getValue(index);\n        // console.log(\"$changes.delete =>\", { fieldName, index, previousValue });\n        this.changes.set(index, { op: spec_1.OPERATION.DELETE, index: index });\n        this.allChanges.delete(index);\n        // delete cache\n        delete this.caches[index];\n        // remove `root` reference\n        if (previousValue && previousValue['$changes']) {\n            previousValue['$changes'].parent = undefined;\n        }\n        this.changed = true;\n        this.touchParents();\n    };\n    ChangeTree.prototype.discard = function (changed, discardAll) {\n        var _this = this;\n        if (changed === void 0) { changed = false; }\n        if (discardAll === void 0) { discardAll = false; }\n        //\n        // Map, Array, etc:\n        // Remove cached key to ensure ADD operations is unsed instead of\n        // REPLACE in case same key is used on next patches.\n        //\n        // TODO: refactor this. this is not relevant for Collection and Set.\n        //\n        if (!(this.ref instanceof Schema_1.Schema)) {\n            this.changes.forEach(function (change) {\n                if (change.op === spec_1.OPERATION.DELETE) {\n                    var index = _this.ref['getIndex'](change.index);\n                    delete _this.indexes[index];\n                }\n            });\n        }\n        this.changes.clear();\n        this.changed = changed;\n        if (discardAll) {\n            this.allChanges.clear();\n        }\n        // re-set `currentCustomOperation`\n        this.currentCustomOperation = 0;\n    };\n    /**\n     * Recursively discard all changes from this, and child structures.\n     */\n    ChangeTree.prototype.discardAll = function () {\n        var _this = this;\n        this.changes.forEach(function (change) {\n            var value = _this.getValue(change.index);\n            if (value && value['$changes']) {\n                value['$changes'].discardAll();\n            }\n        });\n        this.discard();\n    };\n    // cache(field: number, beginIndex: number, endIndex: number) {\n    ChangeTree.prototype.cache = function (field, cachedBytes) {\n        this.caches[field] = cachedBytes;\n    };\n    ChangeTree.prototype.clone = function () {\n        return new ChangeTree(this.ref, this.parent, this.root);\n    };\n    ChangeTree.prototype.ensureRefId = function () {\n        // skip if refId is already set.\n        if (this.refId !== undefined) {\n            return;\n        }\n        this.refId = this.root.getNextUniqueId();\n    };\n    ChangeTree.prototype.assertValidIndex = function (index, fieldName) {\n        if (index === undefined) {\n            throw new Error(\"ChangeTree: missing index for field \\\"\" + fieldName + \"\\\"\");\n        }\n    };\n    return ChangeTree;\n}());\nexports.ChangeTree = ChangeTree;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlVHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaGFuZ2VzL0NoYW5nZVRyZWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0NBQW9DO0FBQ3BDLG9DQUFtQztBQTRCbkMsRUFBRTtBQUNGLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0Y7SUFBQTtRQUNJLEVBQUU7UUFDRix3Q0FBd0M7UUFDeEMsd0RBQXdEO1FBQ3hELEVBQUU7UUFDSyxTQUFJLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztRQUM5QixjQUFTLEdBQThCLEVBQUUsQ0FBQztRQUMxQyxnQkFBVyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFFN0IsaUJBQVksR0FBVyxDQUFDLENBQUM7SUFpRXZDLENBQUM7SUEvREcsOEJBQWUsR0FBZjtRQUNJLE9BQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxlQUFlO0lBQ2YscUJBQU0sR0FBTixVQUFPLEtBQWEsRUFBRSxHQUFRLEVBQUUsY0FBOEI7UUFBOUIsK0JBQUEsRUFBQSxxQkFBOEI7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTFCLElBQUksY0FBYyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1RDtJQUNMLENBQUM7SUFFRCxlQUFlO0lBQ2Ysd0JBQVMsR0FBVCxVQUFVLEtBQUs7UUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCx3QkFBUyxHQUFUO1FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxlQUFlO0lBQ2Ysd0NBQXlCLEdBQXpCO1FBQUEsaUJBb0NDO1FBbkNHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSztZQUMzQixJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM1QixJQUFNLEdBQUcsR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFakMsRUFBRTtnQkFDRix1RUFBdUU7Z0JBQ3ZFLEVBQUU7Z0JBQ0YsSUFBSSxHQUFHLFlBQVksZUFBTSxFQUFFO29CQUN2QixLQUFLLElBQU0sU0FBUyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLEVBQUU7d0JBQy9DLElBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxRQUFROzRCQUMxRCxHQUFHLENBQUMsU0FBUyxDQUFDOzRCQUNkLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFDNUI7NEJBQ0UsS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7eUJBQ3BEO3FCQUNKO2lCQUVKO3FCQUFNO29CQUNILElBQU0sVUFBVSxHQUFxQixHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztvQkFDeEUsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO29CQUV0RixJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssVUFBVSxFQUFFO3dCQUNoRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQzs2QkFDbkIsT0FBTyxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQXZDLENBQXVDLENBQUMsQ0FBQztxQkFDcEU7aUJBQ0o7Z0JBRUQsS0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hCLE9BQU8sS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQUFDLEFBMUVELElBMEVDO0FBMUVZLG9CQUFJO0FBNEVqQjtJQW9CSSxvQkFBWSxHQUFRLEVBQUUsTUFBWSxFQUFFLElBQVc7UUFUL0MsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUN6QixZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQTJCLENBQUM7UUFDN0MsZUFBVSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFFL0IsK0JBQStCO1FBQy9CLFdBQU0sR0FBZ0MsRUFBRSxDQUFDO1FBRXpDLDJCQUFzQixHQUFXLENBQUMsQ0FBQztRQUcvQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCw4QkFBUyxHQUFULFVBQ0ksTUFBVyxFQUNYLElBQVcsRUFDWCxXQUFvQjtRQUh4QixpQkFvREM7UUEvQ0csSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxlQUFNLENBQUM7Z0JBQ3ZDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU87Z0JBQ2pDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDWjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBRS9CLDBDQUEwQztRQUMxQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLEVBQUU7UUFDRix5Q0FBeUM7UUFDekMsRUFBRTtRQUNGLElBQUksSUFBSSxDQUFDLEdBQUcsWUFBWSxlQUFNLEVBQUU7WUFDNUIsSUFBTSxVQUFVLEdBQXFCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFN0QsS0FBSyxJQUFJLEtBQUssSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUNqQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUU5QixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQzVCLElBQU0sYUFBVyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBRTdDLEtBQUssQ0FBQyxVQUFVLENBQWdCLENBQUMsU0FBUyxDQUN2QyxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksRUFDSixhQUFXLENBQ2QsQ0FBQztpQkFDTDthQUNKO1NBRUo7YUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFLEdBQUc7Z0JBQ3hCLElBQUksS0FBSyxZQUFZLGVBQU0sRUFBRTtvQkFDekIsSUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUN0QyxJQUFNLGFBQVcsR0FBRyxLQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFFdEQsV0FBVyxDQUFDLFNBQVMsQ0FDakIsS0FBSSxDQUFDLEdBQUcsRUFDUixLQUFJLENBQUMsSUFBSSxFQUNULGFBQVcsQ0FDZCxDQUFDO2lCQUNMO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFFRCw4QkFBUyxHQUFULFVBQVUsRUFBbUI7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELDJCQUFNLEdBQU4sVUFBTyxTQUEwQixFQUFFLFNBQW9DO1FBQXBDLDBCQUFBLEVBQUEsWUFBdUIsZ0JBQVMsQ0FBQyxHQUFHO1FBQ25FLElBQU0sS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLFFBQVEsQ0FBQztZQUMzQyxDQUFDLENBQUMsU0FBUztZQUNYLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFeEMsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFL0MsSUFDSSxDQUFDLGNBQWM7WUFDZixjQUFjLENBQUMsRUFBRSxLQUFLLGdCQUFTLENBQUMsTUFBTTtZQUN0QyxjQUFjLENBQUMsRUFBRSxLQUFLLGdCQUFTLENBQUMsS0FBSyxDQUFDLHFDQUFxQztVQUM3RTtZQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRTtnQkFDcEIsRUFBRSxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUM7b0JBQ2pCLENBQUMsQ0FBQyxTQUFTO29CQUNYLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEtBQUssZ0JBQVMsQ0FBQyxNQUFNLENBQUM7d0JBQ3RDLENBQUMsQ0FBQyxnQkFBUyxDQUFDLGNBQWM7d0JBQzFCLENBQUMsQ0FBQyxTQUFTO2dCQUNYLHVCQUF1QjtnQkFDL0IsS0FBSyxPQUFBO2FBQ1IsQ0FBQyxDQUFDO1NBQ047UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELDBCQUFLLEdBQUwsVUFBTSxTQUEwQjtRQUM1QixJQUFNLEtBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxRQUFRLENBQUM7WUFDM0MsQ0FBQyxDQUFDLFNBQVM7WUFDWCxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0IsbURBQW1EO1FBQ25ELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsaUNBQVksR0FBWjtRQUNJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDbkU7SUFDTCxDQUFDO0lBRUQsNEJBQU8sR0FBUCxVQUFRLEtBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3pCLElBQU0sVUFBVSxHQUFJLElBQUksQ0FBQyxHQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDdkQsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFFLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUUsQ0FBQztTQUUvRDthQUFNO1lBQ0gsSUFBTSxVQUFVLEdBQUksSUFBSSxDQUFDLE1BQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUQsSUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBRSxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBRSxDQUFDO1lBRW5GLEVBQUU7WUFDRiw0Q0FBNEM7WUFDNUMsMkJBQTJCO1lBQzNCLGtDQUFrQztZQUNsQyxrQ0FBa0M7WUFDbEMsRUFBRTtZQUNGLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QztJQUNMLENBQUM7SUFFRCxzQ0FBaUIsR0FBakI7UUFDSSxJQUFNLFlBQVksR0FBSSxJQUFJLENBQUMsTUFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxZQUFZLENBQUM7UUFDekUsT0FBTyxZQUFZLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsRUFBRTtJQUNGLDBCQUEwQjtJQUMxQixFQUFFO0lBQ0YsNkJBQVEsR0FBUixVQUFTLEtBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCwyQkFBTSxHQUFOLFVBQU8sU0FBMEI7UUFDN0IsSUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssUUFBUSxDQUFDO1lBQzNDLENBQUMsQ0FBQyxTQUFTO1lBQ1gsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFOUIsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0JBQW9CLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksK0NBQTBDLFNBQVMsVUFBSyxLQUFLLE1BQUcsQ0FBQyxDQUFDO1lBQzVILE9BQU87U0FDVjtRQUVELElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsMEVBQTBFO1FBRTFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxnQkFBUyxDQUFDLE1BQU0sRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFOUIsZUFBZTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQiwwQkFBMEI7UUFDMUIsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzVDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCw0QkFBTyxHQUFQLFVBQVEsT0FBd0IsRUFBRSxVQUEyQjtRQUE3RCxpQkEwQkM7UUExQk8sd0JBQUEsRUFBQSxlQUF3QjtRQUFFLDJCQUFBLEVBQUEsa0JBQTJCO1FBQ3pELEVBQUU7UUFDRixtQkFBbUI7UUFDbkIsaUVBQWlFO1FBQ2pFLG9EQUFvRDtRQUNwRCxFQUFFO1FBQ0Ysb0VBQW9FO1FBQ3BFLEVBQUU7UUFDRixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLGVBQU0sQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBTTtnQkFDeEIsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLGdCQUFTLENBQUMsTUFBTSxFQUFFO29CQUNoQyxJQUFNLEtBQUssR0FBRyxLQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQkFDaEQsT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM5QjtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXZCLElBQUksVUFBVSxFQUFFO1lBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUMzQjtRQUVELGtDQUFrQztRQUNsQyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7T0FFRztJQUNILCtCQUFVLEdBQVY7UUFBQSxpQkFVQztRQVRHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBTTtZQUN4QixJQUFNLEtBQUssR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUxQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQzVCLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNsQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCwrREFBK0Q7SUFDL0QsMEJBQUssR0FBTCxVQUFNLEtBQWEsRUFBRSxXQUFxQjtRQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLFdBQVcsQ0FBQztJQUNyQyxDQUFDO0lBRUQsMEJBQUssR0FBTDtRQUNJLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsZ0NBQVcsR0FBWDtRQUNJLGdDQUFnQztRQUNoQyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQzFCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRVMscUNBQWdCLEdBQTFCLFVBQTJCLEtBQWEsRUFBRSxTQUEwQjtRQUNoRSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBd0MsU0FBUyxPQUFHLENBQUMsQ0FBQztTQUN6RTtJQUNMLENBQUM7SUFFTCxpQkFBQztBQUFELENBQUMsQUF4UUQsSUF3UUM7QUF4UVksZ0NBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPUEVSQVRJT04gfSBmcm9tIFwiLi4vc3BlY1wiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4uL1NjaGVtYVwiO1xuaW1wb3J0IHsgU2NoZW1hRGVmaW5pdGlvbiB9IGZyb20gXCIuLi9hbm5vdGF0aW9uc1wiO1xuXG5pbXBvcnQgeyBNYXBTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZXMvTWFwU2NoZW1hXCI7XG5pbXBvcnQgeyBBcnJheVNjaGVtYSB9IGZyb20gXCIuLi90eXBlcy9BcnJheVNjaGVtYVwiO1xuaW1wb3J0IHsgQ29sbGVjdGlvblNjaGVtYSB9IGZyb20gXCIuLi90eXBlcy9Db2xsZWN0aW9uU2NoZW1hXCI7XG5pbXBvcnQgeyBTZXRTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZXMvU2V0U2NoZW1hXCI7XG5cbmV4cG9ydCB0eXBlIFJlZiA9IFNjaGVtYVxuICAgIHwgQXJyYXlTY2hlbWFcbiAgICB8IE1hcFNjaGVtYVxuICAgIHwgQ29sbGVjdGlvblNjaGVtYVxuICAgIHwgU2V0U2NoZW1hO1xuXG5leHBvcnQgaW50ZXJmYWNlIENoYW5nZU9wZXJhdGlvbiB7XG4gICAgb3A6IE9QRVJBVElPTixcbiAgICBpbmRleDogbnVtYmVyLFxufVxuXG4vL1xuLy8gRmllbGRDYWNoZSBpcyB1c2VkIGZvciBAZmlsdGVyKClcbi8vXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkQ2FjaGUge1xuICAgIGJlZ2luSW5kZXg6IG51bWJlcjtcbiAgICBlbmRJbmRleDogbnVtYmVyO1xufVxuXG5cbi8vXG4vLyBSb290IGhvbGRzIGFsbCBzY2hlbWEgcmVmZXJlbmNlcyBieSB1bmlxdWUgaWRcbi8vXG5leHBvcnQgY2xhc3MgUm9vdCB7XG4gICAgLy9cbiAgICAvLyBSZWxhdGlvbiBvZiByZWZJZCA9PiBTY2hlbWEgc3RydWN0dXJlXG4gICAgLy8gRm9yIGRpcmVjdCBhY2Nlc3Mgb2Ygc3RydWN0dXJlcyBkdXJpbmcgZGVjb2RpbmcgdGltZS5cbiAgICAvL1xuICAgIHB1YmxpYyByZWZzID0gbmV3IE1hcDxudW1iZXIsIFJlZj4oKTtcbiAgICBwdWJsaWMgcmVmQ291bnRzOiB7W3JlZklkOiBudW1iZXJdOiBudW1iZXJ9ID0ge307XG4gICAgcHVibGljIGRlbGV0ZWRSZWZzID0gbmV3IFNldDxudW1iZXI+KCk7XG5cbiAgICBwcm90ZWN0ZWQgbmV4dFVuaXF1ZUlkOiBudW1iZXIgPSAwO1xuXG4gICAgZ2V0TmV4dFVuaXF1ZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0VW5pcXVlSWQrKztcbiAgICB9XG5cbiAgICAvLyBmb3IgZGVjb2RpbmdcbiAgICBhZGRSZWYocmVmSWQ6IG51bWJlciwgcmVmOiBSZWYsIGluY3JlbWVudENvdW50OiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnJlZnMuc2V0KHJlZklkLCByZWYpO1xuXG4gICAgICAgIGlmIChpbmNyZW1lbnRDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5yZWZDb3VudHNbcmVmSWRdID0gKHRoaXMucmVmQ291bnRzW3JlZklkXSB8fCAwKSArIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmb3IgZGVjb2RpbmdcbiAgICByZW1vdmVSZWYocmVmSWQpIHtcbiAgICAgICAgdGhpcy5yZWZDb3VudHNbcmVmSWRdID0gdGhpcy5yZWZDb3VudHNbcmVmSWRdIC0gMTtcbiAgICAgICAgdGhpcy5kZWxldGVkUmVmcy5hZGQocmVmSWQpO1xuICAgIH1cblxuICAgIGNsZWFyUmVmcygpIHtcbiAgICAgICAgdGhpcy5yZWZzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuZGVsZXRlZFJlZnMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5yZWZDb3VudHMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBmb3IgZGVjb2RpbmdcbiAgICBnYXJiYWdlQ29sbGVjdERlbGV0ZWRSZWZzKCkge1xuICAgICAgICB0aGlzLmRlbGV0ZWRSZWZzLmZvckVhY2goKHJlZklkKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWZDb3VudHNbcmVmSWRdIDw9IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWYgPSB0aGlzLnJlZnMuZ2V0KHJlZklkKTtcblxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIGNoaWxkIHNjaGVtYSBpbnN0YW5jZXMgaGF2ZSB0aGVpciByZWZlcmVuY2VzIHJlbW92ZWQgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIGlmIChyZWYgaW5zdGFuY2VvZiBTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZE5hbWUgaW4gcmVmWydfZGVmaW5pdGlvbiddLnNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiAocmVmWydfZGVmaW5pdGlvbiddLnNjaGVtYVtmaWVsZE5hbWVdKSAhPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZltmaWVsZE5hbWVdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmW2ZpZWxkTmFtZV1bJyRjaGFuZ2VzJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUmVmKHJlZltmaWVsZE5hbWVdWyckY2hhbmdlcyddLnJlZklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmaW5pdGlvbjogU2NoZW1hRGVmaW5pdGlvbiA9IHJlZlsnJGNoYW5nZXMnXS5wYXJlbnQuX2RlZmluaXRpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBkZWZpbml0aW9uLnNjaGVtYVtkZWZpbml0aW9uLmZpZWxkc0J5SW5kZXhbcmVmWyckY2hhbmdlcyddLnBhcmVudEluZGV4XV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoT2JqZWN0LnZhbHVlcyh0eXBlKVswXSkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShyZWYudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goKGNoaWxkKSA9PiB0aGlzLnJlbW92ZVJlZihjaGlsZFsnJGNoYW5nZXMnXS5yZWZJZCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZzLmRlbGV0ZShyZWZJZCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVmQ291bnRzW3JlZklkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2xlYXIgZGVsZXRlZCByZWZzLlxuICAgICAgICB0aGlzLmRlbGV0ZWRSZWZzLmNsZWFyKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hhbmdlVHJlZSB7XG4gICAgcmVmOiBSZWY7XG4gICAgcmVmSWQ6IG51bWJlcjtcblxuICAgIHJvb3Q/OiBSb290O1xuXG4gICAgcGFyZW50PzogUmVmO1xuICAgIHBhcmVudEluZGV4PzogbnVtYmVyO1xuXG4gICAgaW5kZXhlczoge1tpbmRleDogc3RyaW5nXTogYW55fTtcblxuICAgIGNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBjaGFuZ2VzID0gbmV3IE1hcDxudW1iZXIsIENoYW5nZU9wZXJhdGlvbj4oKTtcbiAgICBhbGxDaGFuZ2VzID0gbmV3IFNldDxudW1iZXI+KCk7XG5cbiAgICAvLyBjYWNoZWQgaW5kZXhlcyBmb3IgZmlsdGVyaW5nXG4gICAgY2FjaGVzOiB7W2ZpZWxkOiBudW1iZXJdOiBudW1iZXJbXX0gPSB7fTtcblxuICAgIGN1cnJlbnRDdXN0b21PcGVyYXRpb246IG51bWJlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihyZWY6IFJlZiwgcGFyZW50PzogUmVmLCByb290PzogUm9vdCkge1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5zZXRQYXJlbnQocGFyZW50LCByb290KTtcbiAgICB9XG5cbiAgICBzZXRQYXJlbnQoXG4gICAgICAgIHBhcmVudDogUmVmLFxuICAgICAgICByb290PzogUm9vdCxcbiAgICAgICAgcGFyZW50SW5kZXg/OiBudW1iZXIsXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5pbmRleGVzKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ZXMgPSAodGhpcy5yZWYgaW5zdGFuY2VvZiBTY2hlbWEpXG4gICAgICAgICAgICAgICAgPyB0aGlzLnJlZlsnX2RlZmluaXRpb24nXS5pbmRleGVzXG4gICAgICAgICAgICAgICAgOiB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLnBhcmVudEluZGV4ID0gcGFyZW50SW5kZXg7XG5cbiAgICAgICAgLy8gYXZvaWQgc2V0dGluZyBwYXJlbnRzIHdpdGggZW1wdHkgYHJvb3RgXG4gICAgICAgIGlmICghcm9vdCkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcblxuICAgICAgICAvL1xuICAgICAgICAvLyBhc3NpZ24gc2FtZSBwYXJlbnQgb24gY2hpbGQgc3RydWN0dXJlc1xuICAgICAgICAvL1xuICAgICAgICBpZiAodGhpcy5yZWYgaW5zdGFuY2VvZiBTY2hlbWEpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb246IFNjaGVtYURlZmluaXRpb24gPSB0aGlzLnJlZlsnX2RlZmluaXRpb24nXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgZmllbGQgaW4gZGVmaW5pdGlvbi5zY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMucmVmW2ZpZWxkXTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZVsnJGNoYW5nZXMnXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJbmRleCA9IGRlZmluaXRpb24uaW5kZXhlc1tmaWVsZF07XG5cbiAgICAgICAgICAgICAgICAgICAgKHZhbHVlWyckY2hhbmdlcyddIGFzIENoYW5nZVRyZWUpLnNldFBhcmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEluZGV4LFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiAodGhpcy5yZWYpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aGlzLnJlZi5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZVRyZWVlID0gdmFsdWVbJyRjaGFuZ2VzJ107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEluZGV4ID0gdGhpcy5yZWZbJyRjaGFuZ2VzJ10uaW5kZXhlc1trZXldO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZVRyZWVlLnNldFBhcmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVyYXRpb24ob3A6IENoYW5nZU9wZXJhdGlvbikge1xuICAgICAgICB0aGlzLmNoYW5nZXMuc2V0KC0tdGhpcy5jdXJyZW50Q3VzdG9tT3BlcmF0aW9uLCBvcCk7XG4gICAgfVxuXG4gICAgY2hhbmdlKGZpZWxkTmFtZTogc3RyaW5nIHwgbnVtYmVyLCBvcGVyYXRpb246IE9QRVJBVElPTiA9IE9QRVJBVElPTi5BREQpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSAodHlwZW9mIChmaWVsZE5hbWUpID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgPyBmaWVsZE5hbWVcbiAgICAgICAgICAgIDogdGhpcy5pbmRleGVzW2ZpZWxkTmFtZV07XG5cbiAgICAgICAgdGhpcy5hc3NlcnRWYWxpZEluZGV4KGluZGV4LCBmaWVsZE5hbWUpO1xuXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQ2hhbmdlID0gdGhpcy5jaGFuZ2VzLmdldChpbmRleCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXByZXZpb3VzQ2hhbmdlIHx8XG4gICAgICAgICAgICBwcmV2aW91c0NoYW5nZS5vcCA9PT0gT1BFUkFUSU9OLkRFTEVURSB8fFxuICAgICAgICAgICAgcHJldmlvdXNDaGFuZ2Uub3AgPT09IE9QRVJBVElPTi5UT1VDSCAvLyAobWF6bW9ycmEuaW8ncyBCYXR0bGVBY3Rpb24gaXNzdWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VzLnNldChpbmRleCwge1xuICAgICAgICAgICAgICAgIG9wOiAoIXByZXZpb3VzQ2hhbmdlKVxuICAgICAgICAgICAgICAgICAgICA/IG9wZXJhdGlvblxuICAgICAgICAgICAgICAgICAgICA6IChwcmV2aW91c0NoYW5nZS5vcCA9PT0gT1BFUkFUSU9OLkRFTEVURSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gT1BFUkFUSU9OLkRFTEVURV9BTkRfQUREXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9wZXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDogT1BFUkFUSU9OLlJFUExBQ0UsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hbGxDaGFuZ2VzLmFkZChpbmRleCk7XG5cbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50b3VjaFBhcmVudHMoKTtcbiAgICB9XG5cbiAgICB0b3VjaChmaWVsZE5hbWU6IHN0cmluZyB8IG51bWJlcikge1xuICAgICAgICBjb25zdCBpbmRleCA9ICh0eXBlb2YgKGZpZWxkTmFtZSkgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICA/IGZpZWxkTmFtZVxuICAgICAgICAgICAgOiB0aGlzLmluZGV4ZXNbZmllbGROYW1lXTtcblxuICAgICAgICB0aGlzLmFzc2VydFZhbGlkSW5kZXgoaW5kZXgsIGZpZWxkTmFtZSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNoYW5nZXMuaGFzKGluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VzLnNldChpbmRleCwgeyBvcDogT1BFUkFUSU9OLlRPVUNILCBpbmRleCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWxsQ2hhbmdlcy5hZGQoaW5kZXgpO1xuXG4gICAgICAgIC8vIGVuc3VyZSB0b3VjaCBpcyBwbGFjZWQgdW50aWwgdGhlICRyb290IGlzIGZvdW5kLlxuICAgICAgICB0aGlzLnRvdWNoUGFyZW50cygpO1xuICAgIH1cblxuICAgIHRvdWNoUGFyZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAodGhpcy5wYXJlbnRbJyRjaGFuZ2VzJ10gYXMgQ2hhbmdlVHJlZSkudG91Y2godGhpcy5wYXJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRUeXBlKGluZGV4PzogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLnJlZlsnX2RlZmluaXRpb24nXSkge1xuICAgICAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9ICh0aGlzLnJlZiBhcyBTY2hlbWEpWydfZGVmaW5pdGlvbiddO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb24uc2NoZW1hWyBkZWZpbml0aW9uLmZpZWxkc0J5SW5kZXhbaW5kZXhdIF07XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSAodGhpcy5wYXJlbnQgYXMgU2NoZW1hKVsnX2RlZmluaXRpb24nXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBkZWZpbml0aW9uLnNjaGVtYVsgZGVmaW5pdGlvbi5maWVsZHNCeUluZGV4W3RoaXMucGFyZW50SW5kZXhdIF07XG5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGNoaWxkIHR5cGUgZnJvbSBwYXJlbnQgc3RydWN0dXJlLlxuICAgICAgICAgICAgLy8gLSBbXCJzdHJpbmdcIl0gPT4gXCJzdHJpbmdcIlxuICAgICAgICAgICAgLy8gLSB7IG1hcDogXCJzdHJpbmdcIiB9ID0+IFwic3RyaW5nXCJcbiAgICAgICAgICAgIC8vIC0geyBzZXQ6IFwic3RyaW5nXCIgfSA9PiBcInN0cmluZ1wiXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocGFyZW50VHlwZSlbMF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDaGlsZHJlbkZpbHRlcigpIHtcbiAgICAgICAgY29uc3QgY2hpbGRGaWx0ZXJzID0gKHRoaXMucGFyZW50IGFzIFNjaGVtYSlbJ19kZWZpbml0aW9uJ10uY2hpbGRGaWx0ZXJzO1xuICAgICAgICByZXR1cm4gY2hpbGRGaWx0ZXJzICYmIGNoaWxkRmlsdGVyc1t0aGlzLnBhcmVudEluZGV4XTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIHVzZWQgZHVyaW5nIGAuZW5jb2RlKClgXG4gICAgLy9cbiAgICBnZXRWYWx1ZShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZlsnZ2V0QnlJbmRleCddKGluZGV4KTtcbiAgICB9XG5cbiAgICBkZWxldGUoZmllbGROYW1lOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSAodHlwZW9mIChmaWVsZE5hbWUpID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgPyBmaWVsZE5hbWVcbiAgICAgICAgICAgIDogdGhpcy5pbmRleGVzW2ZpZWxkTmFtZV07XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgQGNvbHlzZXVzL3NjaGVtYSAke3RoaXMucmVmLmNvbnN0cnVjdG9yLm5hbWV9OiB0cnlpbmcgdG8gZGVsZXRlIG5vbi1leGlzdGluZyBpbmRleDogJHtmaWVsZE5hbWV9ICgke2luZGV4fSlgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSB0aGlzLmdldFZhbHVlKGluZGV4KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCIkY2hhbmdlcy5kZWxldGUgPT5cIiwgeyBmaWVsZE5hbWUsIGluZGV4LCBwcmV2aW91c1ZhbHVlIH0pO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlcy5zZXQoaW5kZXgsIHsgb3A6IE9QRVJBVElPTi5ERUxFVEUsIGluZGV4IH0pO1xuXG4gICAgICAgIHRoaXMuYWxsQ2hhbmdlcy5kZWxldGUoaW5kZXgpO1xuXG4gICAgICAgIC8vIGRlbGV0ZSBjYWNoZVxuICAgICAgICBkZWxldGUgdGhpcy5jYWNoZXNbaW5kZXhdO1xuXG4gICAgICAgIC8vIHJlbW92ZSBgcm9vdGAgcmVmZXJlbmNlXG4gICAgICAgIGlmIChwcmV2aW91c1ZhbHVlICYmIHByZXZpb3VzVmFsdWVbJyRjaGFuZ2VzJ10pIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWVbJyRjaGFuZ2VzJ10ucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50b3VjaFBhcmVudHMoKTtcbiAgICB9XG5cbiAgICBkaXNjYXJkKGNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZSwgZGlzY2FyZEFsbDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIE1hcCwgQXJyYXksIGV0YzpcbiAgICAgICAgLy8gUmVtb3ZlIGNhY2hlZCBrZXkgdG8gZW5zdXJlIEFERCBvcGVyYXRpb25zIGlzIHVuc2VkIGluc3RlYWQgb2ZcbiAgICAgICAgLy8gUkVQTEFDRSBpbiBjYXNlIHNhbWUga2V5IGlzIHVzZWQgb24gbmV4dCBwYXRjaGVzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUT0RPOiByZWZhY3RvciB0aGlzLiB0aGlzIGlzIG5vdCByZWxldmFudCBmb3IgQ29sbGVjdGlvbiBhbmQgU2V0LlxuICAgICAgICAvL1xuICAgICAgICBpZiAoISh0aGlzLnJlZiBpbnN0YW5jZW9mIFNjaGVtYSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlcy5mb3JFYWNoKChjaGFuZ2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLm9wID09PSBPUEVSQVRJT04uREVMRVRFKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5yZWZbJ2dldEluZGV4J10oY2hhbmdlLmluZGV4KVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5pbmRleGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hhbmdlcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmNoYW5nZWQgPSBjaGFuZ2VkO1xuXG4gICAgICAgIGlmIChkaXNjYXJkQWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFsbENoYW5nZXMuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlLXNldCBgY3VycmVudEN1c3RvbU9wZXJhdGlvbmBcbiAgICAgICAgdGhpcy5jdXJyZW50Q3VzdG9tT3BlcmF0aW9uID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBkaXNjYXJkIGFsbCBjaGFuZ2VzIGZyb20gdGhpcywgYW5kIGNoaWxkIHN0cnVjdHVyZXMuXG4gICAgICovXG4gICAgZGlzY2FyZEFsbCgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VzLmZvckVhY2goKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlKGNoYW5nZS5pbmRleCk7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZVsnJGNoYW5nZXMnXSkge1xuICAgICAgICAgICAgICAgIHZhbHVlWyckY2hhbmdlcyddLmRpc2NhcmRBbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kaXNjYXJkKCk7XG4gICAgfVxuXG4gICAgLy8gY2FjaGUoZmllbGQ6IG51bWJlciwgYmVnaW5JbmRleDogbnVtYmVyLCBlbmRJbmRleDogbnVtYmVyKSB7XG4gICAgY2FjaGUoZmllbGQ6IG51bWJlciwgY2FjaGVkQnl0ZXM6IG51bWJlcltdKSB7XG4gICAgICAgIHRoaXMuY2FjaGVzW2ZpZWxkXSA9IGNhY2hlZEJ5dGVzO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IENoYW5nZVRyZWUodGhpcy5yZWYsIHRoaXMucGFyZW50LCB0aGlzLnJvb3QpO1xuICAgIH1cblxuICAgIGVuc3VyZVJlZklkKCkge1xuICAgICAgICAvLyBza2lwIGlmIHJlZklkIGlzIGFscmVhZHkgc2V0LlxuICAgICAgICBpZiAodGhpcy5yZWZJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZklkID0gdGhpcy5yb290LmdldE5leHRVbmlxdWVJZCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3NlcnRWYWxpZEluZGV4KGluZGV4OiBudW1iZXIsIGZpZWxkTmFtZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5nZVRyZWU6IG1pc3NpbmcgaW5kZXggZm9yIGZpZWxkIFwiJHtmaWVsZE5hbWV9XCJgKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19"},"sourceMaps":null,"error":null,"hash":"f3b7b952307938246bf6c61a0115dae0","cacheData":{"env":{}}}