{"id":"tvMB","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\package.json","includedInParent":true,"mtime":1624300838072},{"name":"./msgpack","loc":{"line":23,"column":35},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\msgpack.js"},{"name":"strong-events","loc":{"line":24,"column":30},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\strong-events\\lib\\index.js"},{"name":"nanoevents","loc":{"line":25,"column":27},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\nanoevents\\index.js"},{"name":"./Connection","loc":{"line":26,"column":27},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Connection.js"},{"name":"./serializer/Serializer","loc":{"line":27,"column":27},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\serializer\\Serializer.js"},{"name":"./Protocol","loc":{"line":28,"column":25},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Protocol.js"},{"name":"@colyseus/schema/lib/encoding/encode","loc":{"line":29,"column":34},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\encoding\\encode.js"},{"name":"@colyseus/schema/lib/encoding/decode","loc":{"line":30,"column":34},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\Room.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\encoding\\decode.js"}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Room = void 0;\n\nvar msgpack = __importStar(require(\"./msgpack\"));\n\nvar strong_events_1 = require(\"strong-events\");\n\nvar nanoevents_1 = require(\"nanoevents\");\n\nvar Connection_1 = require(\"./Connection\");\n\nvar Serializer_1 = require(\"./serializer/Serializer\");\n\nvar Protocol_1 = require(\"./Protocol\");\n\nvar encode = __importStar(require(\"@colyseus/schema/lib/encoding/encode\"));\n\nvar decode = __importStar(require(\"@colyseus/schema/lib/encoding/decode\"));\n\nvar Room =\n/** @class */\nfunction () {\n  function Room(name, rootSchema) {\n    var _this = this; // Public signals\n\n\n    this.onStateChange = strong_events_1.createSignal();\n    this.onError = strong_events_1.createSignal();\n    this.onLeave = strong_events_1.createSignal();\n    this.onJoin = strong_events_1.createSignal();\n    this.hasJoined = false;\n    this.onMessageHandlers = nanoevents_1.createNanoEvents();\n    this.id = null;\n    this.name = name;\n\n    if (rootSchema) {\n      this.serializer = new (Serializer_1.getSerializer(\"schema\"))();\n      this.rootSchema = rootSchema;\n      this.serializer.state = new rootSchema();\n    }\n\n    this.onError(function (code, message) {\n      return console.warn(\"colyseus.js - onError => (\" + code + \") \" + message);\n    });\n    this.onLeave(function () {\n      return _this.removeAllListeners();\n    });\n  }\n\n  Room.prototype.connect = function (endpoint) {\n    var _this = this;\n\n    this.connection = new Connection_1.Connection(endpoint, false);\n    this.connection.reconnectEnabled = false;\n    this.connection.onmessage = this.onMessageCallback.bind(this);\n\n    this.connection.onclose = function (e) {\n      if (!_this.hasJoined) {\n        console.warn(\"Room connection was closed unexpectedly (\" + e.code + \"): \" + e.reason);\n\n        _this.onError.invoke(e.code, e.reason);\n\n        return;\n      }\n\n      _this.onLeave.invoke(e.code);\n\n      _this.destroy();\n    };\n\n    this.connection.onerror = function (e) {\n      console.warn(\"Room, onError (\" + e.code + \"): \" + e.reason);\n\n      _this.onError.invoke(e.code, e.reason);\n    };\n\n    this.connection.open();\n  };\n\n  Room.prototype.leave = function (consented) {\n    if (consented === void 0) {\n      consented = true;\n    }\n\n    if (this.connection) {\n      if (consented) {\n        this.connection.send([Protocol_1.Protocol.LEAVE_ROOM]);\n      } else {\n        this.connection.close();\n      }\n    } else {\n      this.onLeave.invoke(4000); // \"consented\" code\n    }\n  };\n\n  Room.prototype.onMessage = function (type, callback) {\n    return this.onMessageHandlers.on(this.getMessageHandlerKey(type), callback);\n  };\n\n  Room.prototype.send = function (type, message) {\n    var initialBytes = [Protocol_1.Protocol.ROOM_DATA];\n\n    if (typeof type === \"string\") {\n      encode.string(initialBytes, type);\n    } else {\n      encode.number(initialBytes, type);\n    }\n\n    var arr;\n\n    if (message !== undefined) {\n      var encoded = msgpack.encode(message);\n      arr = new Uint8Array(initialBytes.length + encoded.byteLength);\n      arr.set(new Uint8Array(initialBytes), 0);\n      arr.set(new Uint8Array(encoded), initialBytes.length);\n    } else {\n      arr = new Uint8Array(initialBytes);\n    }\n\n    this.connection.send(arr.buffer);\n  };\n\n  Object.defineProperty(Room.prototype, \"state\", {\n    get: function () {\n      return this.serializer.getState();\n    },\n    enumerable: false,\n    configurable: true\n  }); // TODO: deprecate / move somewhere else\n  // this method is useful only for FossilDeltaSerializer\n\n  Room.prototype.listen = function (segments, callback, immediate) {\n    if (this.serializerId === \"schema\") {\n      console.warn(\"'\" + this.serializerId + \"' serializer doesn't support .listen() method here.\");\n      return;\n    } else if (!this.serializerId) {\n      console.warn(\"room.Listen() should be called after room.onJoin has been called (DEPRECATION WARNING)\");\n    }\n\n    return this.serializer.api.listen(segments, callback, immediate);\n  }; // TODO: deprecate / move somewhere else\n  // this method is useful only for FossilDeltaSerializer\n\n\n  Room.prototype.removeListener = function (listener) {\n    return this.serializer.api.removeListener(listener);\n  };\n\n  Room.prototype.removeAllListeners = function () {\n    this.onJoin.clear();\n    this.onStateChange.clear();\n    this.onError.clear();\n    this.onLeave.clear();\n    this.onMessageHandlers.events = {};\n  };\n\n  Room.prototype.onMessageCallback = function (event) {\n    var bytes = Array.from(new Uint8Array(event.data));\n    var code = bytes[0];\n\n    if (code === Protocol_1.Protocol.JOIN_ROOM) {\n      var offset = 1;\n      this.serializerId = Protocol_1.utf8Read(bytes, offset);\n      offset += Protocol_1.utf8Length(this.serializerId); // Instantiate serializer if not locally available.\n\n      if (!this.serializer) {\n        var serializer = Serializer_1.getSerializer(this.serializerId);\n        this.serializer = new serializer();\n      }\n\n      if (bytes.length > offset && this.serializer.handshake) {\n        this.serializer.handshake(bytes, {\n          offset: offset\n        });\n      }\n\n      this.hasJoined = true;\n      this.onJoin.invoke(); // acknowledge successfull JOIN_ROOM\n\n      this.connection.send([Protocol_1.Protocol.JOIN_ROOM]);\n    } else if (code === Protocol_1.Protocol.ERROR) {\n      var it_1 = {\n        offset: 1\n      };\n      var code_1 = decode.number(bytes, it_1);\n      var message = decode.string(bytes, it_1);\n      this.onError.invoke(code_1, message);\n    } else if (code === Protocol_1.Protocol.LEAVE_ROOM) {\n      this.leave();\n    } else if (code === Protocol_1.Protocol.ROOM_DATA_SCHEMA) {\n      var it_2 = {\n        offset: 1\n      };\n\n      var context_1 = this.serializer.getState().constructor._context;\n\n      var type = context_1.get(decode.number(bytes, it_2));\n      var message = new type();\n      message.decode(bytes, it_2);\n      this.dispatchMessage(type, message);\n    } else if (code === Protocol_1.Protocol.ROOM_STATE) {\n      bytes.shift(); // drop `code` byte\n\n      this.setState(bytes);\n    } else if (code === Protocol_1.Protocol.ROOM_STATE_PATCH) {\n      bytes.shift(); // drop `code` byte\n\n      this.patch(bytes);\n    } else if (code === Protocol_1.Protocol.ROOM_DATA) {\n      var it_3 = {\n        offset: 1\n      };\n      var type = decode.stringCheck(bytes, it_3) ? decode.string(bytes, it_3) : decode.number(bytes, it_3);\n      var message = bytes.length > it_3.offset ? msgpack.decode(event.data, it_3.offset) : undefined;\n      this.dispatchMessage(type, message);\n    }\n  };\n\n  Room.prototype.setState = function (encodedState) {\n    this.serializer.setState(encodedState);\n    this.onStateChange.invoke(this.serializer.getState());\n  };\n\n  Room.prototype.patch = function (binaryPatch) {\n    this.serializer.patch(binaryPatch);\n    this.onStateChange.invoke(this.serializer.getState());\n  };\n\n  Room.prototype.dispatchMessage = function (type, message) {\n    var messageType = this.getMessageHandlerKey(type);\n\n    if (this.onMessageHandlers.events[messageType]) {\n      this.onMessageHandlers.emit(messageType, message);\n    } else if (this.onMessageHandlers.events['*']) {\n      this.onMessageHandlers.emit('*', type, message);\n    } else {\n      console.warn(\"onMessage not registered for type '\" + type + \"'.\");\n    }\n  };\n\n  Room.prototype.destroy = function () {\n    if (this.serializer) {\n      this.serializer.teardown();\n    }\n  };\n\n  Room.prototype.getMessageHandlerKey = function (type) {\n    switch (_typeof(type)) {\n      // typeof Schema\n      case \"function\":\n        return \"$\" + type._typeid;\n      // string\n\n      case \"string\":\n        return type;\n      // number\n\n      case \"number\":\n        return \"i\" + type;\n\n      default:\n        throw new Error(\"invalid message type.\");\n    }\n  };\n\n  return Room;\n}();\n\nexports.Room = Room;"},"sourceMaps":null,"error":null,"hash":"ade4b3b1f5b888b24d63f694b8dc9b5c","cacheData":{"env":{}}}