{"id":"JaFy","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\package.json","includedInParent":true,"mtime":1624300837947},{"name":"../changes/ChangeTree","loc":{"line":4,"column":27},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\SetSchema.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\changes\\ChangeTree.js"},{"name":"../spec","loc":{"line":5,"column":21},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\SetSchema.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\spec.js"},{"name":"../Schema","loc":{"line":6,"column":23},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\SetSchema.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Schema.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetSchema = void 0;\nvar ChangeTree_1 = require(\"../changes/ChangeTree\");\nvar spec_1 = require(\"../spec\");\nvar Schema_1 = require(\"../Schema\");\nvar SetSchema = /** @class */ (function () {\n    function SetSchema(initialValues) {\n        var _this = this;\n        this.$changes = new ChangeTree_1.ChangeTree(this);\n        this.$items = new Map();\n        this.$indexes = new Map();\n        this.$refId = 0;\n        if (initialValues) {\n            initialValues.forEach(function (v) { return _this.add(v); });\n        }\n    }\n    SetSchema.is = function (type) {\n        return type['set'] !== undefined;\n    };\n    SetSchema.prototype.add = function (value) {\n        if (this.has(value)) {\n            return false;\n        }\n        // set \"index\" for reference.\n        var index = this.$refId++;\n        var isRef = (value['$changes']) !== undefined;\n        if (isRef) {\n            value['$changes'].setParent(this, this.$changes.root, index);\n        }\n        this.$changes.indexes[index] = index;\n        this.$indexes.set(index, index);\n        this.$items.set(index, value);\n        this.$changes.change(index);\n        return index;\n    };\n    SetSchema.prototype.entries = function () {\n        return this.$items.entries();\n    };\n    SetSchema.prototype.delete = function (item) {\n        var entries = this.$items.entries();\n        var index;\n        var entry;\n        while (entry = entries.next()) {\n            if (entry.done) {\n                break;\n            }\n            if (item === entry.value[1]) {\n                index = entry.value[0];\n                break;\n            }\n        }\n        if (index === undefined) {\n            return false;\n        }\n        this.$changes.delete(index);\n        this.$indexes.delete(index);\n        return this.$items.delete(index);\n    };\n    SetSchema.prototype.clear = function (isDecoding) {\n        var _this = this;\n        // discard previous operations.\n        this.$changes.discard(true, true);\n        this.$changes.indexes = {};\n        // clear previous indexes\n        this.$indexes.clear();\n        // flag child items for garbage collection.\n        if (isDecoding && typeof (this.$changes.getType()) !== \"string\") {\n            this.$items.forEach(function (item) {\n                _this.$changes.root.removeRef(item['$changes'].refId);\n            });\n        }\n        // clear items\n        this.$items.clear();\n        this.$changes.operation({ index: 0, op: spec_1.OPERATION.CLEAR });\n        // touch all structures until reach root\n        this.$changes.touchParents();\n    };\n    SetSchema.prototype.has = function (value) {\n        var values = this.$items.values();\n        var has = false;\n        var entry;\n        while (entry = values.next()) {\n            if (entry.done) {\n                break;\n            }\n            if (value === entry.value) {\n                has = true;\n                break;\n            }\n        }\n        return has;\n    };\n    SetSchema.prototype.forEach = function (callbackfn) {\n        var _this = this;\n        this.$items.forEach(function (value, key, _) { return callbackfn(value, key, _this); });\n    };\n    SetSchema.prototype.values = function () {\n        return this.$items.values();\n    };\n    Object.defineProperty(SetSchema.prototype, \"size\", {\n        get: function () {\n            return this.$items.size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SetSchema.prototype.setIndex = function (index, key) {\n        this.$indexes.set(index, key);\n    };\n    SetSchema.prototype.getIndex = function (index) {\n        return this.$indexes.get(index);\n    };\n    SetSchema.prototype.getByIndex = function (index) {\n        return this.$items.get(this.$indexes.get(index));\n    };\n    SetSchema.prototype.deleteByIndex = function (index) {\n        var key = this.$indexes.get(index);\n        this.$items.delete(key);\n        this.$indexes.delete(index);\n    };\n    SetSchema.prototype.toArray = function () {\n        return Array.from(this.$items.values());\n    };\n    SetSchema.prototype.toJSON = function () {\n        var values = [];\n        this.forEach(function (value, key) {\n            values.push((typeof (value['toJSON']) === \"function\")\n                ? value['toJSON']()\n                : value);\n        });\n        return values;\n    };\n    //\n    // Decoding utilities\n    //\n    SetSchema.prototype.clone = function (isDecoding) {\n        var cloned;\n        if (isDecoding) {\n            // client-side\n            cloned = Object.assign(new SetSchema(), this);\n        }\n        else {\n            // server-side\n            cloned = new SetSchema();\n            this.forEach(function (value) {\n                if (value['$changes']) {\n                    cloned.add(value['clone']());\n                }\n                else {\n                    cloned.add(value);\n                }\n            });\n        }\n        return cloned;\n    };\n    SetSchema.prototype.triggerAll = function () {\n        Schema_1.Schema.prototype.triggerAll.apply(this);\n    };\n    return SetSchema;\n}());\nexports.SetSchema = SetSchema;\n//# sourceMappingURL=data:application/json;base64,"},"sourceMaps":null,"error":null,"hash":"ba552d9b10f74576a390ae298594708f","cacheData":{"env":{}}}