{"id":"g42E","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\package.json","includedInParent":true,"mtime":1624300837947},{"name":"./annotations","loc":{"line":23,"column":28},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Reflection.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\annotations.js"},{"name":"./Schema","loc":{"line":24,"column":23},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Reflection.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Schema.js"},{"name":"./types/ArraySchema","loc":{"line":25,"column":28},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Reflection.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\ArraySchema.js"},{"name":"./types","loc":{"line":26,"column":22},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Reflection.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\index.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Reflection = exports.ReflectionType = exports.ReflectionField = void 0;\nvar annotations_1 = require(\"./annotations\");\nvar Schema_1 = require(\"./Schema\");\nvar ArraySchema_1 = require(\"./types/ArraySchema\");\nvar types_1 = require(\"./types\");\nvar reflectionContext = new annotations_1.Context();\n/**\n * Reflection\n */\nvar ReflectionField = /** @class */ (function (_super) {\n    __extends(ReflectionField, _super);\n    function ReflectionField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        annotations_1.type(\"string\", reflectionContext)\n    ], ReflectionField.prototype, \"name\", void 0);\n    __decorate([\n        annotations_1.type(\"string\", reflectionContext)\n    ], ReflectionField.prototype, \"type\", void 0);\n    __decorate([\n        annotations_1.type(\"number\", reflectionContext)\n    ], ReflectionField.prototype, \"referencedType\", void 0);\n    return ReflectionField;\n}(Schema_1.Schema));\nexports.ReflectionField = ReflectionField;\nvar ReflectionType = /** @class */ (function (_super) {\n    __extends(ReflectionType, _super);\n    function ReflectionType() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.fields = new ArraySchema_1.ArraySchema();\n        return _this;\n    }\n    __decorate([\n        annotations_1.type(\"number\", reflectionContext)\n    ], ReflectionType.prototype, \"id\", void 0);\n    __decorate([\n        annotations_1.type([ReflectionField], reflectionContext)\n    ], ReflectionType.prototype, \"fields\", void 0);\n    return ReflectionType;\n}(Schema_1.Schema));\nexports.ReflectionType = ReflectionType;\nvar Reflection = /** @class */ (function (_super) {\n    __extends(Reflection, _super);\n    function Reflection() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.types = new ArraySchema_1.ArraySchema();\n        return _this;\n    }\n    Reflection.encode = function (instance) {\n        var rootSchemaType = instance.constructor;\n        var reflection = new Reflection();\n        reflection.rootType = rootSchemaType._typeid;\n        var buildType = function (currentType, schema) {\n            for (var fieldName in schema) {\n                var field = new ReflectionField();\n                field.name = fieldName;\n                var fieldType = void 0;\n                if (typeof (schema[fieldName]) === \"string\") {\n                    fieldType = schema[fieldName];\n                }\n                else {\n                    var type_1 = schema[fieldName];\n                    var childTypeSchema = void 0;\n                    //\n                    // TODO: refactor below.\n                    //\n                    if (Schema_1.Schema.is(type_1)) {\n                        fieldType = \"ref\";\n                        childTypeSchema = schema[fieldName];\n                    }\n                    else {\n                        fieldType = Object.keys(type_1)[0];\n                        if (typeof (type_1[fieldType]) === \"string\") {\n                            fieldType += \":\" + type_1[fieldType]; // array:string\n                        }\n                        else {\n                            childTypeSchema = type_1[fieldType];\n                        }\n                    }\n                    field.referencedType = (childTypeSchema)\n                        ? childTypeSchema._typeid\n                        : -1;\n                }\n                field.type = fieldType;\n                currentType.fields.push(field);\n            }\n            reflection.types.push(currentType);\n        };\n        var types = rootSchemaType._context.types;\n        for (var typeid in types) {\n            var type_2 = new ReflectionType();\n            type_2.id = Number(typeid);\n            buildType(type_2, types[typeid]._definition.schema);\n        }\n        return reflection.encodeAll();\n    };\n    Reflection.decode = function (bytes, it) {\n        var context = new annotations_1.Context();\n        var reflection = new Reflection();\n        reflection.decode(bytes, it);\n        var schemaTypes = reflection.types.reduce(function (types, reflectionType) {\n            var schema = /** @class */ (function (_super) {\n                __extends(_, _super);\n                function _() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return _;\n            }(Schema_1.Schema));\n            var typeid = reflectionType.id;\n            types[typeid] = schema;\n            context.add(schema, typeid);\n            return types;\n        }, {});\n        reflection.types.forEach(function (reflectionType) {\n            var schemaType = schemaTypes[reflectionType.id];\n            reflectionType.fields.forEach(function (field) {\n                var _a;\n                if (field.referencedType !== undefined) {\n                    var fieldType = field.type;\n                    var refType = schemaTypes[field.referencedType];\n                    // map or array of primitive type (-1)\n                    if (!refType) {\n                        var typeInfo = field.type.split(\":\");\n                        fieldType = typeInfo[0];\n                        refType = typeInfo[1];\n                    }\n                    if (fieldType === \"ref\") {\n                        annotations_1.type(refType, context)(schemaType.prototype, field.name);\n                    }\n                    else {\n                        annotations_1.type((_a = {}, _a[fieldType] = refType, _a), context)(schemaType.prototype, field.name);\n                    }\n                }\n                else {\n                    annotations_1.type(field.type, context)(schemaType.prototype, field.name);\n                }\n            });\n        });\n        var rootType = schemaTypes[reflection.rootType];\n        var rootInstance = new rootType();\n        /**\n         * auto-initialize referenced types on root type\n         * to allow registering listeners immediatelly on client-side\n         */\n        for (var fieldName in rootType._definition.schema) {\n            var fieldType = rootType._definition.schema[fieldName];\n            if (typeof (fieldType) !== \"string\") {\n                rootInstance[fieldName] = (typeof (fieldType) === \"function\")\n                    ? new fieldType() // is a schema reference\n                    : new (types_1.getType(Object.keys(fieldType)[0])).constructor(); // is a \"collection\"\n            }\n        }\n        return rootInstance;\n    };\n    __decorate([\n        annotations_1.type([ReflectionType], reflectionContext)\n    ], Reflection.prototype, \"types\", void 0);\n    __decorate([\n        annotations_1.type(\"number\", reflectionContext)\n    ], Reflection.prototype, \"rootType\", void 0);\n    return Reflection;\n}(Schema_1.Schema));\nexports.Reflection = Reflection;\n//# sourceMappingURL=data:application/json;base64,"},"sourceMaps":null,"error":null,"hash":"68a70e7428c6b58f6e30bbfed9376b33","cacheData":{"env":{}}}