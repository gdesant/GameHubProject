{"id":"XzxS","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\tsconfig.json","includedInParent":true,"mtime":1624300732051},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"tslib","loc":{"line":1,"column":26},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\src\\client\\services\\Server.ts","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\tslib\\tslib.es6.js"},{"name":"colyseus.js","loc":{"line":2,"column":23},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\src\\client\\services\\Server.ts","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\colyseus.js\\lib\\index.js"},{"name":"phaser","loc":{"line":3,"column":19},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\src\\client\\services\\Server.ts","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\phaser\\dist\\phaser.js"},{"name":"../../types/messages","loc":{"line":4,"column":24},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\src\\client\\services\\Server.ts","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\src\\types\\messages.ts"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _colyseus = require(\"colyseus.js\");\n\nvar _phaser = _interopRequireDefault(require(\"phaser\"));\n\nvar _messages = require(\"../../types/messages\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Server = /*#__PURE__*/function () {\n  function Server() {\n    _classCallCheck(this, Server);\n\n    this._playerIndex = -1;\n    this.client = new _colyseus.Client('ws://localhost:2567');\n    this.events = new _phaser.default.Events.EventEmitter();\n  }\n\n  _createClass(Server, [{\n    key: \"playerIndex\",\n    get: function get() {\n      return this._playerIndex;\n    }\n  }, {\n    key: \"join\",\n    value: function join() {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.client.joinOrCreate('hub');\n\n              case 2:\n                this.room = _context.sent;\n                this.room.onMessage(_messages.Message.PlayerIndex, function (message) {\n                  _this._playerIndex = message.playerIndex;\n                  console.log(_this.playerIndex);\n                });\n                this.room.onMessage(_messages.Message.PlayerJoin, function (message) {\n                  console.log(message.playerIndex + ' has Join !');\n\n                  _this.events.emit('player-join', message.playerIndex, message.player, message.sessionId, message.state);\n                });\n                this.room.onMessage(_messages.Message.PlayerLeave, function (message) {\n                  console.log(message.playerIndex + ' has Leave !');\n\n                  _this.events.emit('player-leave', message.playerIndex, message.state);\n                });\n                this.room.onStateChange(function (state) {\n                  _this.events.emit('on-state-changed', state);\n                });\n\n                this.room.state.onChange = function (changes) {\n                  changes.forEach(function (change) {\n                    console.log(change);\n                  });\n                }; // this.room.state.board.onAdd = (cell, key) => {\n                //console.log('cell added', cell, key)\n                //}\n\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"makeSelection\",\n    value: function makeSelection(id) {\n      if (!this.room) {\n        return;\n      }\n\n      if (this.playerIndex !== this.room.state.activePlayer) {\n        console.warn('this is not your turn');\n        return;\n      }\n\n      this.room.send(_messages.Message.PlayerSelection, {\n        index: id\n      });\n    }\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      var _a;\n\n      (_a = this.room) === null || _a === void 0 ? void 0 : _a.leave();\n      this.events.removeAllListeners();\n    }\n  }, {\n    key: \"firstStateChanged\",\n    value: function firstStateChanged(cb, context) {\n      this.events.once('first-state-changed', cb, context);\n    }\n  }, {\n    key: \"onStateChanged\",\n    value: function onStateChanged(cb, context) {\n      this.events.on('on-state-changed', cb, context);\n    }\n  }, {\n    key: \"onPlayerJoin\",\n    value: function onPlayerJoin(cb, context) {\n      this.events.on('player-join', cb, context);\n    }\n  }, {\n    key: \"onPlayerLeave\",\n    value: function onPlayerLeave(cb, context) {\n      this.events.on('player-leave', cb, context);\n    }\n  }, {\n    key: \"onMasterLaunch\",\n    value: function onMasterLaunch(cb, context) {\n      this.events.once('master-launch', cb, context);\n    }\n  }, {\n    key: \"onPlayerTurnChanged\",\n    value: function onPlayerTurnChanged(cb, context) {\n      this.events.on('player-turn-changed', cb, context);\n    }\n  }, {\n    key: \"onPlayerWon\",\n    value: function onPlayerWon(cb, context) {\n      this.events.on('player-win', cb, context);\n    }\n  }]);\n\n  return Server;\n}();\n\nexports.default = Server;"},"sourceMaps":null,"error":null,"hash":"d3120799ea4edfe0dba562d27375f2b2","cacheData":{"env":{}}}