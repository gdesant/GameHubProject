{"id":"UV6W","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@gamestdio\\websocket\\package.json","includedInParent":true,"mtime":1624300837933},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@gamestdio\\websocket\\.babelrc","includedInParent":true,"mtime":499162500000},{"name":"./backoff","loc":{"line":1,"column":751},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@gamestdio\\websocket\\lib\\index.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@gamestdio\\websocket\\lib\\backoff.js"},{"name":"ws","loc":{"line":1,"column":845},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@gamestdio\\websocket\\lib\\index.js","resolved":"C:\\Users\\S de Santi\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar createBackoff = require('./backoff').createBackoff;\n\nvar WebSocketImpl = typeof WebSocket !== \"undefined\" ? WebSocket : require('ws');\n\nvar WebSocketClient = function () {\n  /**\n  * @param url DOMString The URL to which to connect; this should be the URL to which the WebSocket server will respond.\n  * @param protocols DOMString|DOMString[] Either a single protocol string or an array of protocol strings. These strings are used to indicate sub-protocols, so that a single server can implement multiple WebSocket sub-protocols (for example, you might want one server to be able to handle different types of interactions depending on the specified protocol). If you don't specify a protocol string, an empty string is assumed.\n  */\n  function WebSocketClient(url, protocols) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, WebSocketClient);\n\n    this.url = url;\n    this.protocols = protocols;\n    this.reconnectEnabled = true;\n    this.listeners = {};\n    this.backoff = createBackoff(options.backoff || 'exponential', options);\n    this.backoff.onReady = this.onBackoffReady.bind(this);\n\n    if (typeof options.connect === \"undefined\" || options.connect) {\n      this.open();\n    }\n  }\n\n  _createClass(WebSocketClient, [{\n    key: 'open',\n    value: function open() {\n      var reconnect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.isReconnect = reconnect; // keep binaryType used on previous WebSocket connection\n\n      var binaryType = this.ws && this.ws.binaryType;\n      this.ws = new WebSocketImpl(this.url, this.protocols);\n      this.ws.onclose = this.onCloseCallback.bind(this);\n      this.ws.onerror = this.onErrorCallback.bind(this);\n      this.ws.onmessage = this.onMessageCallback.bind(this);\n      this.ws.onopen = this.onOpenCallback.bind(this);\n\n      if (binaryType) {\n        this.ws.binaryType = binaryType;\n      }\n    }\n    /**\n    * @ignore\n    */\n\n  }, {\n    key: 'onBackoffReady',\n    value: function onBackoffReady(number, delay) {\n      // console.log(\"onBackoffReady\", number + ' ' + delay + 'ms');\n      this.open(true);\n    }\n    /**\n    * @ignore\n    */\n\n  }, {\n    key: 'onCloseCallback',\n    value: function onCloseCallback(e) {\n      if (!this.isReconnect && this.listeners['onclose']) {\n        this.listeners['onclose'].apply(null, arguments);\n      }\n\n      if (this.reconnectEnabled && e.code < 3000) {\n        this.backoff.backoff();\n      }\n    }\n    /**\n    * @ignore\n    */\n\n  }, {\n    key: 'onErrorCallback',\n    value: function onErrorCallback() {\n      if (this.listeners['onerror']) {\n        this.listeners['onerror'].apply(null, arguments);\n      }\n    }\n    /**\n    * @ignore\n    */\n\n  }, {\n    key: 'onMessageCallback',\n    value: function onMessageCallback() {\n      if (this.listeners['onmessage']) {\n        this.listeners['onmessage'].apply(null, arguments);\n      }\n    }\n    /**\n    * @ignore\n    */\n\n  }, {\n    key: 'onOpenCallback',\n    value: function onOpenCallback() {\n      if (this.listeners['onopen']) {\n        this.listeners['onopen'].apply(null, arguments);\n      }\n\n      if (this.isReconnect && this.listeners['onreconnect']) {\n        this.listeners['onreconnect'].apply(null, arguments);\n      }\n\n      this.isReconnect = false;\n    }\n    /**\n    * The number of bytes of data that have been queued using calls to send()\n    * but not yet transmitted to the network. This value does not reset to zero\n    * when the connection is closed; if you keep calling send(), this will\n    * continue to climb.\n    *\n    * @type unsigned long\n    * @readonly\n    */\n\n  }, {\n    key: 'close',\n\n    /**\n    * Closes the WebSocket connection or connection attempt, if any. If the\n    * connection is already CLOSED, this method does nothing.\n    *\n    * @param code A numeric value indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal \"transaction complete\" closure) is assumed. See the list of status codes on the CloseEvent page for permitted values.\n    * @param reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).\n    *\n    * @return void\n    */\n    value: function close(code, reason) {\n      if (typeof code == 'undefined') {\n        code = 1000;\n      }\n\n      this.reconnectEnabled = false;\n      this.ws.close(code, reason);\n    }\n    /**\n    * Transmits data to the server over the WebSocket connection.\n    * @param data DOMString|ArrayBuffer|Blob\n    * @return void\n    */\n\n  }, {\n    key: 'send',\n    value: function send(data) {\n      this.ws.send(data);\n    }\n    /**\n    * An event listener to be called when the WebSocket connection's readyState changes to CLOSED. The listener receives a CloseEvent named \"close\".\n    * @param listener EventListener\n    */\n\n  }, {\n    key: 'bufferedAmount',\n    get: function get() {\n      return this.ws.bufferedAmount;\n    }\n    /**\n    * The current state of the connection; this is one of the Ready state constants.\n    * @type unsigned short\n    * @readonly\n    */\n\n  }, {\n    key: 'readyState',\n    get: function get() {\n      return this.ws.readyState;\n    }\n    /**\n    * A string indicating the type of binary data being transmitted by the\n    * connection. This should be either \"blob\" if DOM Blob objects are being\n    * used or \"arraybuffer\" if ArrayBuffer objects are being used.\n    * @type DOMString\n    */\n\n  }, {\n    key: 'binaryType',\n    get: function get() {\n      return this.ws.binaryType;\n    },\n    set: function set(binaryType) {\n      this.ws.binaryType = binaryType;\n    }\n    /**\n    * The extensions selected by the server. This is currently only the empty\n    * string or a list of extensions as negotiated by the connection.\n    * @type DOMString\n    */\n\n  }, {\n    key: 'extensions',\n    get: function get() {\n      return this.ws.extensions;\n    },\n    set: function set(extensions) {\n      this.ws.extensions = extensions;\n    }\n    /**\n    * A string indicating the name of the sub-protocol the server selected;\n    * this will be one of the strings specified in the protocols parameter when\n    * creating the WebSocket object.\n    * @type DOMString\n    */\n\n  }, {\n    key: 'protocol',\n    get: function get() {\n      return this.ws.protocol;\n    },\n    set: function set(protocol) {\n      this.ws.protocol = protocol;\n    }\n  }, {\n    key: 'onclose',\n    set: function set(listener) {\n      this.listeners['onclose'] = listener;\n    },\n    get: function get() {\n      return this.listeners['onclose'];\n    }\n    /**\n    * An event listener to be called when an error occurs. This is a simple event named \"error\".\n    * @param listener EventListener\n    */\n\n  }, {\n    key: 'onerror',\n    set: function set(listener) {\n      this.listeners['onerror'] = listener;\n    },\n    get: function get() {\n      return this.listeners['onerror'];\n    }\n    /**\n    * An event listener to be called when a message is received from the server. The listener receives a MessageEvent named \"message\".\n    * @param listener EventListener\n    */\n\n  }, {\n    key: 'onmessage',\n    set: function set(listener) {\n      this.listeners['onmessage'] = listener;\n    },\n    get: function get() {\n      return this.listeners['onmessage'];\n    }\n    /**\n    * An event listener to be called when the WebSocket connection's readyState changes to OPEN; this indicates that the connection is ready to send and receive data. The event is a simple one with the name \"open\".\n    * @param listener EventListener\n    */\n\n  }, {\n    key: 'onopen',\n    set: function set(listener) {\n      this.listeners['onopen'] = listener;\n    },\n    get: function get() {\n      return this.listeners['onopen'];\n    }\n    /**\n    * @param listener EventListener\n    */\n\n  }, {\n    key: 'onreconnect',\n    set: function set(listener) {\n      this.listeners['onreconnect'] = listener;\n    },\n    get: function get() {\n      return this.listeners['onreconnect'];\n    }\n  }]);\n\n  return WebSocketClient;\n}();\n/**\n* The connection is not yet open.\n*/\n\n\nWebSocketClient.CONNECTING = WebSocketImpl.CONNECTING;\n/**\n* The connection is open and ready to communicate.\n*/\n\nWebSocketClient.OPEN = WebSocketImpl.OPEN;\n/**\n* The connection is in the process of closing.\n*/\n\nWebSocketClient.CLOSING = WebSocketImpl.CLOSING;\n/**\n* The connection is closed or couldn't be opened.\n*/\n\nWebSocketClient.CLOSED = WebSocketImpl.CLOSED;\nexports.default = WebSocketClient;"},"sourceMaps":null,"error":null,"hash":"8be9f6e8d4d2d7b47ee46788355afa74","cacheData":{"env":{}}}