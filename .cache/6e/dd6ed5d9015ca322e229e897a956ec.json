{"id":"CTrL","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@gamestdio\\websocket\\package.json","includedInParent":true,"mtime":1624300837933},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@gamestdio\\websocket\\.babelrc","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBackoff = createBackoff;\nvar backoff = {\n  exponential: function exponential(attempt, delay) {\n    return Math.floor(Math.random() * Math.pow(2, attempt) * delay);\n  },\n  fibonacci: function fibonacci(attempt, delay) {\n    var current = 1;\n\n    if (attempt > current) {\n      var prev = 1,\n          current = 2;\n\n      for (var index = 2; index < attempt; index++) {\n        var next = prev + current;\n        prev = current;\n        current = next;\n      }\n    }\n\n    return Math.floor(Math.random() * current * delay);\n  }\n};\n\nfunction createBackoff(type, options) {\n  return new Backoff(backoff[type], options);\n}\n\nfunction Backoff(func, options) {\n  this.func = func;\n  this.attempts = 0;\n  this.delay = typeof options.initialDelay !== \"undefined\" ? options.initialDelay : 100;\n}\n\nBackoff.prototype.backoff = function () {\n  setTimeout(this.onReady, this.func(++this.attempts, this.delay));\n};"},"sourceMaps":null,"error":null,"hash":"32ddcd82c7c8b4bf71c6505f7dd24282","cacheData":{"env":{}}}