{"id":"../../node_modules/@colyseus/schema/lib/types/SetSchema.js","dependencies":[{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\package.json","includedInParent":true,"mtime":1624620152425},{"name":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\package.json","includedInParent":true,"mtime":1624300837947},{"name":"../changes/ChangeTree","loc":{"line":4,"column":27},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\SetSchema.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\changes\\ChangeTree.js"},{"name":"../spec","loc":{"line":5,"column":21},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\SetSchema.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\spec.js"},{"name":"../Schema","loc":{"line":6,"column":23},"parent":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\types\\SetSchema.js","resolved":"C:\\Users\\S de Santi\\Desktop\\NewProject\\node_modules\\@colyseus\\schema\\lib\\Schema.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetSchema = void 0;\nvar ChangeTree_1 = require(\"../changes/ChangeTree\");\nvar spec_1 = require(\"../spec\");\nvar Schema_1 = require(\"../Schema\");\nvar SetSchema = /** @class */ (function () {\n    function SetSchema(initialValues) {\n        var _this = this;\n        this.$changes = new ChangeTree_1.ChangeTree(this);\n        this.$items = new Map();\n        this.$indexes = new Map();\n        this.$refId = 0;\n        if (initialValues) {\n            initialValues.forEach(function (v) { return _this.add(v); });\n        }\n    }\n    SetSchema.is = function (type) {\n        return type['set'] !== undefined;\n    };\n    SetSchema.prototype.add = function (value) {\n        if (this.has(value)) {\n            return false;\n        }\n        // set \"index\" for reference.\n        var index = this.$refId++;\n        var isRef = (value['$changes']) !== undefined;\n        if (isRef) {\n            value['$changes'].setParent(this, this.$changes.root, index);\n        }\n        this.$changes.indexes[index] = index;\n        this.$indexes.set(index, index);\n        this.$items.set(index, value);\n        this.$changes.change(index);\n        return index;\n    };\n    SetSchema.prototype.entries = function () {\n        return this.$items.entries();\n    };\n    SetSchema.prototype.delete = function (item) {\n        var entries = this.$items.entries();\n        var index;\n        var entry;\n        while (entry = entries.next()) {\n            if (entry.done) {\n                break;\n            }\n            if (item === entry.value[1]) {\n                index = entry.value[0];\n                break;\n            }\n        }\n        if (index === undefined) {\n            return false;\n        }\n        this.$changes.delete(index);\n        this.$indexes.delete(index);\n        return this.$items.delete(index);\n    };\n    SetSchema.prototype.clear = function (isDecoding) {\n        var _this = this;\n        // discard previous operations.\n        this.$changes.discard(true, true);\n        this.$changes.indexes = {};\n        // clear previous indexes\n        this.$indexes.clear();\n        // flag child items for garbage collection.\n        if (isDecoding && typeof (this.$changes.getType()) !== \"string\") {\n            this.$items.forEach(function (item) {\n                _this.$changes.root.removeRef(item['$changes'].refId);\n            });\n        }\n        // clear items\n        this.$items.clear();\n        this.$changes.operation({ index: 0, op: spec_1.OPERATION.CLEAR });\n        // touch all structures until reach root\n        this.$changes.touchParents();\n    };\n    SetSchema.prototype.has = function (value) {\n        var values = this.$items.values();\n        var has = false;\n        var entry;\n        while (entry = values.next()) {\n            if (entry.done) {\n                break;\n            }\n            if (value === entry.value) {\n                has = true;\n                break;\n            }\n        }\n        return has;\n    };\n    SetSchema.prototype.forEach = function (callbackfn) {\n        var _this = this;\n        this.$items.forEach(function (value, key, _) { return callbackfn(value, key, _this); });\n    };\n    SetSchema.prototype.values = function () {\n        return this.$items.values();\n    };\n    Object.defineProperty(SetSchema.prototype, \"size\", {\n        get: function () {\n            return this.$items.size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SetSchema.prototype.setIndex = function (index, key) {\n        this.$indexes.set(index, key);\n    };\n    SetSchema.prototype.getIndex = function (index) {\n        return this.$indexes.get(index);\n    };\n    SetSchema.prototype.getByIndex = function (index) {\n        return this.$items.get(this.$indexes.get(index));\n    };\n    SetSchema.prototype.deleteByIndex = function (index) {\n        var key = this.$indexes.get(index);\n        this.$items.delete(key);\n        this.$indexes.delete(index);\n    };\n    SetSchema.prototype.toArray = function () {\n        return Array.from(this.$items.values());\n    };\n    SetSchema.prototype.toJSON = function () {\n        var values = [];\n        this.forEach(function (value, key) {\n            values.push((typeof (value['toJSON']) === \"function\")\n                ? value['toJSON']()\n                : value);\n        });\n        return values;\n    };\n    //\n    // Decoding utilities\n    //\n    SetSchema.prototype.clone = function (isDecoding) {\n        var cloned;\n        if (isDecoding) {\n            // client-side\n            cloned = Object.assign(new SetSchema(), this);\n        }\n        else {\n            // server-side\n            cloned = new SetSchema();\n            this.forEach(function (value) {\n                if (value['$changes']) {\n                    cloned.add(value['clone']());\n                }\n                else {\n                    cloned.add(value);\n                }\n            });\n        }\n        return cloned;\n    };\n    SetSchema.prototype.triggerAll = function () {\n        Schema_1.Schema.prototype.triggerAll.apply(this);\n    };\n    return SetSchema;\n}());\nexports.SetSchema = SetSchema;\n"},"sourceMaps":{"js":{"version":3,"file":"SetSchema.js","sourceRoot":"","sources":["../../src/types/SetSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeTree } from \"../changes/ChangeTree\";\nimport { OPERATION } from \"../spec\";\nimport { SchemaDecoderCallbacks, Schema } from \"../Schema\";\n\ntype K = number; // TODO: allow to specify K generic on MapSchema.\n\nexport class SetSchema<V=any> implements SchemaDecoderCallbacks {\n    protected $changes: ChangeTree = new ChangeTree(this);\n\n    protected $items: Map<number, V> = new Map<number, V>();\n    protected $indexes: Map<number, number> = new Map<number, number>();\n\n    protected $refId: number = 0;\n\n    //\n    // Decoding callbacks\n    //\n    public onAdd?: (item: V, key: number) => void;\n    public onRemove?: (item: V, key: number) => void;\n    public onChange?: (item: V, key: number) => void;\n\n    static is(type: any) {\n        return type['set'] !== undefined;\n    }\n\n    constructor (initialValues?: Array<V>) {\n        if (initialValues) {\n            initialValues.forEach((v) => this.add(v));\n        }\n    }\n\n    add(value: V) {\n        if (this.has(value)) {\n            return false;\n        }\n\n        // set \"index\" for reference.\n        const index = this.$refId++;\n\n        const isRef = (value['$changes']) !== undefined;\n        if (isRef) {\n            (value['$changes'] as ChangeTree).setParent(this, this.$changes.root, index);\n        }\n\n        this.$changes.indexes[index] = index;\n\n        this.$indexes.set(index, index);\n        this.$items.set(index, value);\n\n        this.$changes.change(index);\n\n        return index;\n    }\n\n    entries () {\n        return this.$items.entries();\n    }\n\n    delete(item: V) {\n        const entries = this.$items.entries();\n\n        let index: K;\n        let entry: IteratorResult<[number, V]>;\n        while (entry = entries.next()) {\n            if (entry.done) { break; }\n\n            if (item === entry.value[1]) {\n                index = entry.value[0];\n                break;\n            }\n        }\n\n        if (index === undefined) {\n            return false;\n        }\n\n        this.$changes.delete(index);\n        this.$indexes.delete(index);\n\n        return this.$items.delete(index);\n    }\n\n    clear(isDecoding?: boolean) {\n        // discard previous operations.\n        this.$changes.discard(true, true);\n        this.$changes.indexes = {};\n\n        // clear previous indexes\n        this.$indexes.clear();\n\n        // flag child items for garbage collection.\n        if (isDecoding && typeof (this.$changes.getType()) !== \"string\") {\n            this.$items.forEach((item: V) => {\n                this.$changes.root.removeRef(item['$changes'].refId);\n            });\n        }\n\n        // clear items\n        this.$items.clear();\n\n        this.$changes.operation({ index: 0, op: OPERATION.CLEAR });\n\n        // touch all structures until reach root\n        this.$changes.touchParents();\n    }\n\n    has (value: V): boolean {\n        const values = this.$items.values();\n\n        let has = false;\n        let entry: IteratorResult<V>;\n\n        while (entry = values.next()) {\n            if (entry.done) { break; }\n            if (value === entry.value) {\n                has = true;\n                break;\n            }\n        }\n\n        return has;\n    }\n\n    forEach(callbackfn: (value: V, key: K, collection: SetSchema<V>) => void) {\n        this.$items.forEach((value, key, _) => callbackfn(value, key, this));\n    }\n\n    values() {\n        return this.$items.values();\n    }\n\n    get size () {\n        return this.$items.size;\n    }\n\n    protected setIndex(index: number, key: number) {\n        this.$indexes.set(index, key);\n    }\n\n    protected getIndex(index: number) {\n        return this.$indexes.get(index);\n    }\n\n    protected getByIndex(index: number) {\n        return this.$items.get(this.$indexes.get(index));\n    }\n\n    protected deleteByIndex(index: number) {\n        const key = this.$indexes.get(index);\n        this.$items.delete(key);\n        this.$indexes.delete(index);\n    }\n\n    toArray() {\n        return Array.from(this.$items.values());\n    }\n\n    toJSON() {\n        const values: V[] = [];\n\n        this.forEach((value, key) => {\n            values.push(\n                (typeof (value['toJSON']) === \"function\")\n                    ? value['toJSON']()\n                    : value\n            );\n        });\n\n        return values;\n    }\n\n    //\n    // Decoding utilities\n    //\n    clone(isDecoding?: boolean): SetSchema<V> {\n        let cloned: SetSchema;\n\n        if (isDecoding) {\n            // client-side\n            cloned = Object.assign(new SetSchema(), this);\n\n        } else {\n            // server-side\n            cloned = new SetSchema();\n            this.forEach((value) => {\n                if (value['$changes']) {\n                    cloned.add(value['clone']());\n                } else {\n                    cloned.add(value);\n                }\n            })\n        }\n\n        return cloned;\n    }\n\n    triggerAll (): void {\n        Schema.prototype.triggerAll.apply(this);\n    }\n}"]}},"error":null,"hash":"077fdfbb544471efa590652817569cd3","cacheData":{"env":{}}}